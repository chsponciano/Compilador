#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions
mai : [A-Z]
min : [a-z]
digito : [0-9]
nz : [1-9]
un : _
valido_id : ({digito} | {min} | {un})
p : \.
valido_string : [^\"\n\\]
aspas : \"
barra_inv : \\
valido_com_lin : [^\n]
inicio : #\|
final : \|#
valido_com_blo : ([^#\|] ((#+ | \|)? [^#\|])*)
#Tokens
//identificador
identificador: (({mai} (({valido_id}+ {mai}) | {valido_id}*)*) | ({min} (({mai} {valido_id}+) | {valido_id}*)* {mai}?))

//constante inteira
cons_inteira: (0 | {nz} {digito}*)

//constante real
cons_real: (( 0 | {nz} {digito}*) {p} (0 | {digito}* {nz}))

//constante literal
cons_string: ({aspas} {valido_string}* {aspas})

//constante caracter
cons_caracter: ({barra_inv} (s | n | t))

//comentario de linha 
:! \? {valido_com_lin}* \n?

//comentario de bloco 
:! {inicio} {valido_com_blo} {final}

//palavras reservadas
and = identificador : "and"
begin = identificador : "begin"
bool = identificador : "bool" 
char = identificador : "char"
end = identificador : "end"
false = identificador : "false"
float = identificador : "float"
forward = identificador : "forward"
iffalsedo = identificador : "ifFalseDo"
iftruedo = identificador : "ifTrueDo"
int = identificador : "int"
main = identificador : "main"
module = identificador : "module"
not = identificador : "not"
or = identificador : "or"
read = identificador : "read"
string = identificador : "string"
true = identificador : "true"
void = identificador : "void"
whilefalsedo = identificador : "whileFalseDo"
whiletruedo = identificador : "whileTrueDo"
write = identificador : "write"


//simbolos especiais
"("
")"
"=="
"!="
"<"
"<="
">"
">="
"+="
"-="
"+"
"-"
"*"
"/"
","
"."
";"
":"
"="
"^"

//caracteres de formatacao
:[\s\n\t]
#NonTerminals
<programa>
<declaracao>
<modulo>
<corpo>
<especificacoes_declaracao>
<tipo_modulo> 
<parametros_formais> 
<parametros> 
<lista_de_parametros>
<tipo> 
<lista_de_identificadores> 
<especificacoes_modulo> 
<declaracao_de_variaveis>
<variavel>
<lista_de_comandos>
<comando>
<comando_atribuicao>
<operador_de_atribuicao>
<comando_entrada>
<comando_saida>
<lista_de_expressoes>
<comando_selecao>
<selecao_opcional>
<comando_repeticao>
<tipo_de_repeticao>
<comando_retorno>
<expressao>
<expressao_I>
<elemento>
<relacional>
<operador_relacional>
<aritmetica>
<aritmetica_I>
<termo>
<termo_I>
<fator>
<lista_de_identificadores_I>
<lista_de_comandos_I> 
<relacional_I>
<fator_I>
<fator_II>
<lista_de_expressoes_I>
<comando_dirigido> 
#Grammar
<programa> ::= main <declaracao> <modulo> begin <corpo> end;
<declaracao> ::= î | <especificacoes_declaracao> <declaracao>;
<especificacoes_declaracao> ::= forward module <tipo_modulo> identificador "(" <parametros_formais> ")";
<tipo_modulo> ::= int | float | bool | char | string | void;
<parametros_formais> ::= î | <parametros> <lista_de_parametros>; 
<lista_de_parametros> ::= î | ";" <parametros> <lista_de_parametros>;
<parametros> ::= <tipo> ":" <lista_de_identificadores>;
<tipo> ::= int | float | bool | char | string;
<lista_de_identificadores> ::= identificador <lista_de_identificadores_I>;
<lista_de_identificadores_I> ::= "," <lista_de_identificadores> | î;
<modulo> ::= î | <especificacoes_modulo> <modulo>;
<especificacoes_modulo> ::= module identificador begin <corpo> end;
<corpo> ::= <declaracao_de_variaveis> <lista_de_comandos>;
<declaracao_de_variaveis> ::= î | <variavel> <declaracao_de_variaveis>;
<variavel> ::= <tipo> ":" <lista_de_identificadores> ".";
<lista_de_comandos> ::= <comando> "." <lista_de_comandos_I>;
<lista_de_comandos_I> ::= <lista_de_comandos> | î;
<comando> ::= <comando_atribuicao> | <comando_entrada> | <comando_saida> | "(" <expressao> ")" <comando_dirigido> | <comando_retorno>;
<comando_dirigido> ::= <comando_selecao> | <comando_repeticao>;
<comando_atribuicao> ::= identificador <operador_de_atribuicao> <expressao>;
<operador_de_atribuicao> ::= "=" | "+=" | "-=";
<comando_entrada> ::= read "(" <lista_de_identificadores> ")";
<comando_saida> ::= write "(" <lista_de_expressoes> ")";
<lista_de_expressoes> ::= <expressao> <lista_de_expressoes_I>;
<lista_de_expressoes_I> ::= "," <lista_de_expressoes> | î;
<comando_selecao> ::=  iftruedo <lista_de_comandos> <selecao_opcional> end;
<selecao_opcional> ::= iffalsedo <lista_de_comandos> | î;
<comando_repeticao> ::= <tipo_de_repeticao> <lista_de_comandos> end;
<tipo_de_repeticao> ::= whiletruedo | whilefalsedo;
<comando_retorno> ::= "^" <expressao>;
<expressao> ::= <elemento> <expressao_I>;
<expressao_I> ::= and <elemento> <expressao_I>  | or <elemento> <expressao_I> | î;
<elemento> ::= <relacional> | true | false | not <elemento>;
<relacional> ::= <aritmetica> <relacional_I>;
<relacional_I> ::= <operador_relacional> <aritmetica> | î;
<operador_relacional> ::= "==" | "!=" | "<" | "<=" | ">" | ">=";
<aritmetica> ::= <termo> <aritmetica_I>;
<aritmetica_I> ::= "+" <termo> <aritmetica_I> | "-" <termo> <aritmetica_I> | î;
<termo> ::= <fator> <termo_I>;
<termo_I> ::= "*" <fator> <termo_I> | "/" <fator> <termo_I> | î;
<fator> ::= identificador <fator_I> | cons_inteira | cons_real | cons_string | cons_caracter | "(" <expressao> ")" | "+" <fator> | "-" <fator>;
<fator_I> ::= "(" <fator_II> ")" | î;
<fator_II> ::= <lista_de_expressoes> | î;
